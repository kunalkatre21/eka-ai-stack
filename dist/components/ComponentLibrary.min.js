/**
 * Core Component System
 * Main component initialization and management system
 * Based on the component-based architecture from project working doc
 */

class ComponentSystem {
  constructor() {
    this.components = new Map();
    this.initialized = false;
    this.debugMode = false;
  }

  /**
   * Initialize the component system
   */
  init() {
    if (this.initialized) return;

    console.log('🚀 Initializing Component System...');

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.initializeComponents());
    } else {
      this.initializeComponents();
    }

    this.initialized = true;
  }

  /**
   * Initialize all components on the page
   */
  initializeComponents() {
    const componentElements = document.querySelectorAll('[data-component]');

    componentElements.forEach(element => {
      const componentType = element.dataset.component;
      const config = this.parseConfig(element.dataset.config);

      if (this.debugMode) {
        console.log(`🔧 Initializing component: ${componentType}`, config);
      }

      this.renderComponent(componentType, element, config);
    });

    // Initialize lazy-loaded components
    this.initLazyComponents();

    console.log(`✅ Component System initialized with ${componentElements.length} components`);
  }

  /**
   * Parse component configuration from JSON string
   */
  parseConfig(configString) {
    if (!configString) return {};

    try {
      return JSON.parse(configString);
    } catch (error) {
      console.warn('⚠️ Invalid component config:', configString, error);
      return {};
    }
  }

  /**
   * Render a component
   */
  renderComponent(type, container, config = {}) {
    const ComponentClass = this.components.get(type);

    if (!ComponentClass) {
      console.warn(`⚠️ Component "${type}" not found`);
      return;
    }

    try {
      const component = new ComponentClass(container, config);
      container._componentInstance = component;
    } catch (error) {
      console.error(`❌ Error rendering component "${type}":`, error);
    }
  }

  /**
   * Register a component class
   */
  registerComponent(name, ComponentClass) {
    this.components.set(name, ComponentClass);
    if (this.debugMode) {
      console.log(`📝 Registered component: ${name}`);
    }
  }

  /**
   * Initialize lazy-loaded components
   */
  initLazyComponents() {
    const lazyObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const componentType = element.dataset.component;
          const config = this.parseConfig(element.dataset.config);

          this.renderComponent(componentType, element, config);
          lazyObserver.unobserve(element);
        }
      });
    }, {
      rootMargin: '50px',
      threshold: 0.1
    });

    document.querySelectorAll('[data-lazy-component]').forEach(el => {
      lazyObserver.observe(el);
    });
  }

  /**
   * Enable debug mode
   */
  enableDebug() {
    this.debugMode = true;
    console.log('🐛 Debug mode enabled');
  }

  /**
   * Get debugging information
   */
  getDebugInfo() {
    const activeComponents = Array.from(document.querySelectorAll('[data-component]'))
      .map(el => ({
        type: el.dataset.component,
        element: el,
        config: el.dataset.config,
        hasInstance: !!el._componentInstance
      }));

    return {
      totalComponents: activeComponents.length,
      registeredComponents: Array.from(this.components.keys()),
      activeComponents,
      initialized: this.initialized,
      debugMode: this.debugMode
    };
  }
}

// Global instance
window.ComponentSystem = new ComponentSystem();

// Auto-initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  window.ComponentSystem.init();
});

// Global debug helper
window.debugComponents = () => {
  console.table(window.ComponentSystem.getDebugInfo());
};

/**
 * Navigation Component
 * Responsive navigation with mobile menu support
 * @param {Object} config - Component configuration
 * @param {string} config.variant - 'default' | 'transparent' | 'sticky'
 * @param {Array} config.items - Navigation menu items
 * @param {string} config.logo - Logo URL
 * @param {boolean} config.showCTA - Show call-to-action button
 */

class Navigation {
  constructor(container, config = {}) {
    this.container = container;
    this.config = {
      variant: 'default',
      items: [
        { label: 'Home', href: '#home', icon: 'fal fa-home' },
        { label: 'About', href: '#about', icon: 'fal fa-user' },
        { label: 'Services', href: '#services', icon: 'fal fa-cog' },
        { label: 'Contact', href: '#contact', icon: 'fal fa-envelope' }
      ],
      logo: '/logo.png',
      showCTA: true,
      logoIcon: 'fad fa-hexagon-vertical-nft',
      ...config
    };

    this.render();
    this.attachEvents();
  }

  render() {
    const variantClasses = {
      default: 'bg-white shadow-lg',
      transparent: 'bg-transparent',
      sticky: 'bg-white/90 backdrop-blur-md shadow-lg sticky top-0 z-50'
    };

    this.container.innerHTML = `
      <nav class="${variantClasses[this.config.variant]} transition-all duration-300">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center h-16">
                          <!-- Logo -->
              <div class="flex-shrink-0">
                <a href="/" class="flex items-center">
                  ${this.config.logoIcon ? `<i class="${this.config.logoIcon} text-2xl mr-2" style="--fa-primary-color: var(--icon-primary); --fa-secondary-color: var(--icon-secondary);"></i>` : ''}
                  ${this.config.logo ? `<img src="${this.config.logo}" alt="Logo" class="h-8 w-auto">` : '<span class="text-xl font-bold text-gray-900">Logo</span>'}
                </a>
              </div>

            <!-- Desktop Navigation -->
            <div class="hidden md:block">
              <div class="ml-10 flex items-baseline space-x-4">
                ${this.config.items.map(item => `
                  <a href="${item.href}" class="nav-link text-gray-900 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors">
                    ${item.icon ? `<i class="${item.icon}"></i>` : ''}
                    ${item.label}
                  </a>
                `).join('')}
              </div>
            </div>

            <!-- CTA Button -->
            ${this.config.showCTA ? `
              <div class="hidden md:block">
                <a href="#contact" class="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors">
                  Get Started
                </a>
              </div>
            ` : ''}

            <!-- Mobile menu button -->
            <div class="md:hidden">
              <button type="button" class="mobile-menu-btn bg-gray-200 inline-flex items-center justify-center p-2 rounded-md text-gray-900 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500" aria-expanded="false">
                <span class="sr-only">Open main menu</span>
                <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
                <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        <!-- Mobile Navigation Menu -->
        <div class="mobile-menu hidden md:hidden">
                      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t">
              ${this.config.items.map(item => `
                <a href="${item.href}" class="nav-link text-gray-900 hover:text-blue-600 block px-3 py-2 rounded-md text-base font-medium">
                  ${item.icon ? `<i class="${item.icon}"></i>` : ''}
                  ${item.label}
                </a>
              `).join('')}

            ${this.config.showCTA ? `
              <a href="#contact" class="bg-blue-600 text-white block px-3 py-2 rounded-md text-base font-medium hover:bg-blue-700">
                Get Started
              </a>
            ` : ''}
          </div>
        </div>
      </nav>
    `;
  }

  attachEvents() {
    // Mobile menu toggle
    const mobileMenuBtn = this.container.querySelector('.mobile-menu-btn');
    const mobileMenu = this.container.querySelector('.mobile-menu');
    const menuIcon = mobileMenuBtn?.querySelector('.block');
    const closeIcon = mobileMenuBtn?.querySelector('.hidden');

    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.addEventListener('click', () => {
        const isExpanded = mobileMenuBtn.getAttribute('aria-expanded') === 'true';

        mobileMenuBtn.setAttribute('aria-expanded', !isExpanded);
        mobileMenu.classList.toggle('hidden');

        if (menuIcon && closeIcon) {
          menuIcon.classList.toggle('hidden');
          closeIcon.classList.toggle('hidden');
        }
      });
    }

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!this.container.contains(e.target) && mobileMenu && !mobileMenu.classList.contains('hidden')) {
        mobileMenu.classList.add('hidden');
        mobileMenuBtn?.setAttribute('aria-expanded', 'false');

        if (menuIcon && closeIcon) {
          menuIcon.classList.remove('hidden');
          closeIcon.classList.add('hidden');
        }
      }
    });

    // Smooth scrolling for anchor links
    this.container.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }

        // Close mobile menu after navigation
        if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('hidden');
          mobileMenuBtn?.setAttribute('aria-expanded', 'false');

          if (menuIcon && closeIcon) {
            menuIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
          }
        }
      });
    });
  }
}

// Register component
if (window.ComponentSystem) {
  window.ComponentSystem.registerComponent('navigation', Navigation);
}

/**
 * Hero Section Component
 * Eye-catching hero section with call-to-action
 * @param {Object} config - Component configuration
 * @param {string} config.title - Main heading text
 * @param {string} config.subtitle - Subtitle text
 * @param {string} config.backgroundImage - Background image URL
 * @param {string} config.ctaText - Call-to-action button text
 * @param {string} config.ctaLink - Call-to-action button link
 * @param {string} config.variant - 'default' | 'centered' | 'left-aligned'
 */

class HeroSection {
  constructor(container, config = {}) {
    this.container = container;
    this.config = {
      title: 'Welcome to Our Platform',
      subtitle: 'Build amazing websites with our component-based system',
      backgroundImage: '',
      ctaText: 'Get Started',
      ctaLink: '#contact',
      variant: 'centered',
      badge: '',
      badgeIcon: 'fad fa-sparkles',
      backgroundIcon: 'fad fa-hexagon-vertical-nft',
      ...config
    };

    this.render();
    this.attachEvents();
  }

  render() {
    const variantClasses = {
      default: 'text-center',
      centered: 'text-center',
      'left-aligned': 'text-left'
    };

    const backgroundStyle = this.config.backgroundImage
      ? `background-image: url('${this.config.backgroundImage}'); background-size: cover; background-position: center;`
      : '';

    this.container.innerHTML = `
      <section class="hero-section relative py-20 lg:py-32 ${this.config.backgroundImage ? 'bg-gray-900 text-white' : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'}" style="${backgroundStyle}">
        ${this.config.backgroundImage ? '<div class="absolute inset-0 bg-black bg-opacity-50"></div>' : ''}

        <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <!-- Content -->
            <div class="${variantClasses[this.config.variant]}">
              ${this.config.badge ? `
                <div class="hero-badge mb-6">
                  <i class="${this.config.badgeIcon} badge-icon"></i>
                  <span class="badge-text">${this.config.badge}</span>
                  <div class="badge-glow"></div>
                </div>
              ` : ''}

              <h1 class="text-4xl lg:text-6xl font-bold mb-6 leading-tight">
                ${this.config.title}
              </h1>

              ${this.config.subtitle ? `
                <p class="text-xl lg:text-2xl mb-8 opacity-90 leading-relaxed">
                  ${this.config.subtitle}
                </p>
              ` : ''}

              <div class="flex flex-col sm:flex-row gap-4 ${this.config.variant === 'left-aligned' ? 'justify-start' : 'justify-center'}">
                <a href="${this.config.ctaLink}" class="cta-button bg-white text-blue-600 px-8 py-4 rounded-lg text-lg font-semibold hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
                  ${this.config.ctaText}
                </a>

                <a href="#learn-more" class="secondary-button border-2 border-white text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-white hover:text-blue-600 transition-all duration-300">
                  Learn More
                </a>
              </div>

              <!-- Social proof or additional content -->
              <div class="mt-12 flex items-center justify-center lg:justify-start space-x-8 opacity-75">
                <div class="text-center">
                  <div class="text-2xl font-bold">500+</div>
                  <div class="text-sm">Components</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold">10k+</div>
                  <div class="text-sm">Developers</div>
                </div>
                <div class="text-center">
                  <div class="text-2xl font-bold">99%</div>
                  <div class="text-sm">Uptime</div>
                </div>
              </div>
            </div>

            <!-- Visual Element (optional) -->
            <div class="hidden lg:block">
              <div class="relative">
                <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 shadow-2xl">
                  <div class="aspect-square bg-white/20 rounded-xl flex items-center justify-center">
                    <div class="text-center">
                      <div class="mb-4">
                        <i class="${this.config.backgroundIcon} text-6xl float-element" style="--fa-primary-color: rgba(255, 255, 255, 0.8); --fa-secondary-color: rgba(255, 255, 255, 0.4);"></i>
                      </div>
                      <p class="text-white font-medium">Your Hero Content</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Scroll indicator -->
        <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
          <svg class="w-6 h-6 text-white opacity-75" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </div>
      </section>
    `;
  }

  attachEvents() {
    // Add click tracking or analytics if needed
    const ctaButton = this.container.querySelector('.cta-button');
    if (ctaButton) {
      ctaButton.addEventListener('click', () => {
        // Track conversion event
        if (window.gtag) {
          window.gtag('event', 'click', {
            event_category: 'engagement',
            event_label: 'hero_cta'
          });
        }
      });
    }

    // Smooth scroll for secondary button
    const secondaryButton = this.container.querySelector('.secondary-button');
    if (secondaryButton) {
      secondaryButton.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = secondaryButton.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    }

    // Add intersection observer for animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in');
        }
      });
    }, { threshold: 0.1 });

    observer.observe(this.container);
  }
}

// Register component
if (window.ComponentSystem) {
  window.ComponentSystem.registerComponent('hero-section', HeroSection);
}

/**
 * Card Component
 * Flexible card component for displaying content
 * @param {Object} config - Component configuration
 * @param {string} config.title - Card title
 * @param {string} config.content - Card content/description
 * @param {string} config.image - Card image URL
 * @param {string} config.link - Card link URL
 * @param {string} config.variant - 'default' | 'featured' | 'compact'
 * @param {Array} config.tags - Array of tag strings
 * @param {Object} config.cta - Call-to-action configuration
 */

class Card {
  constructor(container, config = {}) {
    this.container = container;
    this.config = {
      title: 'Card Title',
      content: 'This is the card content that describes what this card is about.',
      image: '',
      link: '#',
      variant: 'default',
      tags: [],
      icon: '',
      titleIcon: '',
      cta: {
        text: 'Learn More',
        link: '#'
      },
      ...config
    };

    this.render();
    this.attachEvents();
  }

  render() {
    const variantClasses = {
      default: 'bg-white shadow-md hover:shadow-lg',
      featured: 'bg-gradient-to-br from-blue-50 to-purple-50 shadow-lg hover:shadow-xl border-2 border-blue-200',
      compact: 'bg-white shadow-sm hover:shadow-md'
    };

    const cardClasses = `card group relative overflow-hidden rounded-xl transition-all duration-300 transform hover:-translate-y-1 ${variantClasses[this.config.variant]}`;

    this.container.innerHTML = `
      <div class="${cardClasses}">
        <!-- Image -->
        ${this.config.image ? `
          <div class="aspect-video overflow-hidden">
            <img src="${this.config.image}"
                 alt="${this.config.title}"
                 class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105">
          </div>
        ` : ''}

        <!-- Content -->
        <div class="p-6">
          <!-- Icon (if provided) -->
          ${this.config.icon ? `
            <div class="mb-4">
              <i class="${this.config.icon} feature-icon"></i>
            </div>
          ` : ''}

          <!-- Tags -->
          ${this.config.tags.length > 0 ? `
            <div class="flex flex-wrap gap-2 mb-4">
              ${this.config.tags.map(tag => `
                <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full font-medium">
                  ${tag}
                </span>
              `).join('')}
            </div>
          ` : ''}

          <!-- Title -->
          <h3 class="text-xl font-bold text-gray-900 mb-3 leading-tight">
            ${this.config.titleIcon ? `<i class="${this.config.titleIcon.replace('far', 'fal')} mr-2"></i>` : ''}
            ${this.config.title}
          </h3>

          <!-- Content -->
          <p class="text-gray-600 mb-4 leading-relaxed">
            ${this.config.content}
          </p>

          <!-- CTA -->
          ${this.config.cta ? `
            <a href="${this.config.cta.link || this.config.link}"
               class="inline-flex items-center text-blue-600 font-semibold hover:text-blue-800 transition-colors group">
              ${this.config.cta.text}
              <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          ` : ''}
        </div>

        <!-- Hover overlay for featured cards -->
        ${this.config.variant === 'featured' ? `
          <div class="absolute inset-0 bg-gradient-to-r from-blue-600/0 to-purple-600/0 group-hover:from-blue-600/5 group-hover:to-purple-600/5 transition-all duration-300 pointer-events-none"></div>
        ` : ''}

        <!-- Click overlay -->
        <a href="${this.config.link}"
           class="absolute inset-0 ${this.config.link !== '#' ? 'cursor-pointer' : ''}"
           aria-label="Read more about ${this.config.title}">
        </a>
      </div>
    `;
  }

  attachEvents() {
    // Add click tracking
    const cardLink = this.container.querySelector('a[href]:not(.inline-flex)');
    if (cardLink && cardLink.getAttribute('href') !== '#') {
      cardLink.addEventListener('click', () => {
        if (window.gtag) {
          window.gtag('event', 'click', {
            event_category: 'engagement',
            event_label: 'card_click',
            value: this.config.title
          });
        }
      });
    }

    // Add intersection observer for animations
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in-up');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });

    observer.observe(this.container);

    // Add loading state for images
    const image = this.container.querySelector('img');
    if (image) {
      image.addEventListener('load', () => {
        image.classList.add('loaded');
      });

      image.addEventListener('error', () => {
        console.warn(`Failed to load image: ${this.config.image}`);
        // Could add fallback image here
      });
    }
  }
}

// Register component
if (window.ComponentSystem) {
  window.ComponentSystem.registerComponent('card', Card);
}

/**
 * Component Library
 * Main component library file that imports and registers all components
 * Based on the component-based architecture from project working doc
 */


// Make ComponentSystem globally available
window.ComponentSystem = ComponentSystem;

// Component Library Object (for external use)
window.TailwindComponents = {
  // Navigation components
  navigation: (config) => {
    return `<div data-component="navigation" data-config='${JSON.stringify(config)}'></div>`;
  },

  // Hero section components
  'hero-section': (config) => {
    return `<div data-component="hero-section" data-config='${JSON.stringify(config)}'></div>`;
  },

  // Content components
  card: (config) => {
    return `<div data-component="card" data-config='${JSON.stringify(config)}'></div>`;
  },

  // Grid layouts
  'card-grid': (config) => {
    const { columns = 3, cards = [] } = config;
    const gridCols = {
      1: 'grid-cols-1',
      2: 'grid-cols-1 md:grid-cols-2',
      3: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
      4: 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4'
    };

    return `
      <div class="grid ${gridCols[columns] || gridCols[3]} gap-6">
        ${cards.map(cardConfig => window.TailwindComponents.card(cardConfig)).join('')}
      </div>
    `;
  },

  // Feature sections
  'features-section': (config) => {
    const { title = 'Features', features = [] } = config;

    return `
      <section class="py-20 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="text-center mb-16">
            <h2 class="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">${title}</h2>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            ${features.map(feature => `
              <div class="bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow">
                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4">
                  <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-900 mb-2">${feature.title}</h3>
                <p class="text-gray-600">${feature.description}</p>
              </div>
            `).join('')}
          </div>
        </div>
      </section>
    `;
  }
};

// Initialize components when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Initialize component system
  if (window.ComponentSystem) {
    window.ComponentSystem.init();
  }

  // Auto-initialize any components that were added after initial load
  setTimeout(() => {
    if (window.ComponentSystem) {
      window.ComponentSystem.initializeComponents();
    }
  }, 100);
});
var ComponentLibrary = window.TailwindComponents;

export { Card, HeroSection, Navigation, ComponentLibrary as default };
